All expressions must follow the following rules to evaluated.

1. All expressions must contain at least one variable, or at least one constant and one valid operator.
	ex. "p" and "~true" are valid. "true" is invalid.
2. No two constants and/or variables may be next to each other.
	ex. "p /\ q" is valid. "pq" is invalid.
3. All operators must be valid.
	ex. see #4-6
4. To be valid all NOT operators must preceed another not, a variable, a constant, or a valid parenthetical expression.
	ex. "~p", "~true", "~~p", and "~(p \/ q)" are valid. 
5. To be valid all AND, OR, IMPLIES, and IFF operators must follow a variable, a constant, or a valid parenthetical expression.
	ex. "p /\ q", "true /\ q", and "(...) /\ q" are valid. 
6. To be valid all AND, OR, IMPLIES, and IFF operators must be followed by a NOT, a variable, a constant, or a valid parenthetical expression.
	ex. "p /\ q", "p /\ true", and "p /\ (...)", and "p /\ ~q" are valid. 
7. All opening parentheses must hava a coresponding closing parenthesis.
	ex. "(p /\ q)" is valid. "(p /\ q" and "p /\ q)" are invalid.
8. An opening parenthesis may not follow a constant or variable, and a closing parenthesis may not preceed a NOT, a constant, or a variable.
	ex. "p(q /\ r)", "(p /\ q)r" and "(p /\ q)~r" are invalid.
